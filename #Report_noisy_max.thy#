section \<open>Report Noisy Max with discrete laplace distribution\<close>

theory Report_noisy_max
  imports Discrete_laplace_rat
          Differential_Privacy
begin

partial_function (spmf) report_noisy_max_loop :: "(('a, int) query) list \<Rightarrow> nat \<Rightarrow> nat \<Rightarrow> nat \<Rightarrow> int \<Rightarrow>'a list \<Rightarrow> (nat \<times> int) spmf" where
"report_noisy_max_loop [] epsilon1 epsilon2 i v x = return_spmf (i,v)|
 report_noisy_max_loop (f#fs) epsilon1 epsilon2 i v x = do {
  noise \<leftarrow> discrete_laplace_rat epsilon2 epsilon1;
  (if (noise + f x > v) then report_noisy_max_loop fs epsilon1 epsilon2 (i+1) (noise+f x) x 
   else report_noisy_max_loop fs epsilon1 epsilon2 i v x)
}
"

term "[]"

definition report_noisy_max:: "('a, int) query \<Rightarrow> nat \<Rightarrow> nat \<Rightarrow> 'a list \<Rightarrow> int spmf" where
"report noisy max f epsilon1 epsilon2 x = "




end
